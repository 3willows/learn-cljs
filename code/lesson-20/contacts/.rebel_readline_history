1571952272605:(require '[contacts.core :as c] :reload)
1571952281098:(c/make-contact {})
1571952294826:(c/make-contact {:foo "bar" :email "charlie"\n                 })
1571952884012:(require '[contacts.core :as c] :reload)
1571952888066:(c/make-contact {})
1571952908170:(c/make-contact {:email "andymeredith@gmail.com"})
1571953188640:(c/make-contact {:email "andymeredith@gmail.com" :address {:foo "bar" :city "Peyton" :state "CO"\n                                                           })
1571953204917:(c/make-contact {:email "andymeredith@gmail.com" :address {:foo "bar" :city "Peyton" :state "CO"}})
1572005662241:(require '[contacts.core :as c] :reload)
1572005697993:(c/add-contact [] {:email "u@e.c" :first-name "User" :address {:state "RI"}})
1572005712959:(require '[contacts.core :as c] :reload)
1572005713687:(c/add-contact [] {:email "u@e.c" :first-name "User" :address {:state "RI"}})
1572005769059:(-> []\n    (c/add-contact {:email "u@e.c" :first-name "User" :address {:state "RI"}})\n    (c/add-contact {:last-name "Meredith"}))
1572006088177:(-> []\n    (c/add-contact {:email "me@example.com"\n                  :first-name "Me"\n                  :address {:state "RI"}})\n    (c/add-contact {:email "you@example.com"\n                  :first-name "You"}))
1572006420782:(dissoc [1 2 3] 1)
1572006435644:(assoc [1 2 3] 1 :foo\n       )
1572006691603:(defn remove-contact [contact-list idx]\n  (vec (concat (subvec contact-list 0 idx)\n               (subvec contact-list (inc idx)))))
1572006699866:(remove-contact [1 2 3] 1)
1572006860867:(vec {:a :foo})
1572006867392:(vec {:a :foo :b "bar"\n      })
1572006900073:(vec #{:foo :bar})
1572006912465:(seq? {})
1572006919151:(seq? {:a "foo"\n       })
1572006931679:(sequable? {:a "foo"})
1572008405184:(update [1 2 3] 1 inc)
1572202798631:(some? nil)
1572202802906:(some? :foo\n       )
1572202855290:(defn format-name [contact]\n  (->> contact\n       ((juxt :first-name :last-name))\n       (filter some)\n       (str/join " ")))
1572202902495:(require '[clojure.string :as str])
1572202910071:(defn format-name [contact]\n  (->> contact\n       ((juxt :first-name :last-name))\n       (filter some)\n       (str/join " ")))
1572202922880:(format-name {:first-name "Andrew"})
1572202943340:((juxt :first-name :last-name)\n {:first-name "Andrew"})
1572202970101:(->> {:first-name "Andrew"} ((juxt :first-name :last-name)))
1572202979285:(->> {:first-name "Andrew"} ((juxt :first-name :last-name)) (filter some))
1572203008037:(filter some [1 2 nil :foo nil :bar])
1572203013187:(filter some?\n        [1 2 nil :foo nil :bar])
1572203025868:(defn format-name [contact]\n  (->> contact\n       ((juxt :first-name :last-name))\n       (filter some?)\n       (str/join " ")))
1572203030842:(format-name {:first-name "Andrew"})
1572203047555:(format-name {:last-name "Meredith"})
1572203055513:(format-name {:last-name "Meredith" :first-name "Andrew"}\n             })
1572203060497:(format-name {:last-name "Meredith" :first-name "Andrew"}\n             \n             )
1572205369653:((juxt :foo :bar) {:foo 32})
1572205388305:(doc juxt)
1572232840905:(str "foo" nil)
1572287444933:(seq "foo")
1572287449605:(str (seq "foo"))
1572287477539:(seq "")
1572357803362:((juxt #(reduce Math/min %) #(reduce Math/max %) [1 2 3 4 5\n                                                  ])\n )
1572357826169:((juxt #(reduce Math/min %) #(reduce Math/max %)) [3 1 4 2 5 3])
1572358066742:(let [sides-list (list [4.2 6] [4 4] [3 4] [5.5 3])]       ;; <1>\n  (for [sides sides-list]                                  ;; <2>\n    (Math.sqrt (+ (Math.pow (first sides) 2)               ;; <3>\n                  (Math.pow (second sides) 2)))))
1572358086602:(Date.now)
1572358093209:(Date)
1572358115569:(Math.random)
1572358178078:NaN
1572358182166:js/NaN
1572358186590:##NaN
1572358263908:(reduce Math.max #{1 4 3 5 6})
1572358270387:(reduce Math.max #{1 4 3 5 6 2\n                   })
1572358357443:(def minmax\n  (juxt #(reduce Math/min %)\n        #(reduce Math/max %)))
1572358362163:(minmax [48 393 12 14 -2 207])
1572457332145:(seq [1 2 3])
1572457335940:(seq 1\n     )
1572457343100:(seq ""\n     )
1572457348836:(seq "1")
1572461171860:(not (mepty? ""))
1572461180633:(not (empty? ""))
1572466819683:(-> 7\n    (inc)\n    (/ 2)\n    (Math.pow 2)\n    (Math.sqrt))
